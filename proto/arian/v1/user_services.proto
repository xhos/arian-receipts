syntax = "proto3";

package ariand.v1;

import "ariand/v1/user.proto";

option go_package = "ariand/gen/go/ariand/v1;ariandv1";

// User management service
service UserService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc UpdateUserDisplayName(UpdateUserDisplayNameRequest) returns (UpdateUserDisplayNameResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  rpc CheckUserExists(CheckUserExistsRequest) returns (CheckUserExistsResponse);
}

message GetUserRequest {
  string id = 1; // UUID
}

message GetUserResponse {
  User user = 1;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByEmailResponse {
  User user = 1;
}

message CreateUserRequest {
  string email = 1;
  optional string display_name = 2;
}

message CreateUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1; // UUID
  optional string email = 2;
  optional string display_name = 3;
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1; // UUID
}

message DeleteUserResponse {}

// WebAuthn credential management service
service CredentialService {
  rpc ListCredentials(ListCredentialsRequest) returns (ListCredentialsResponse);
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse);
  rpc GetCredentialByCredentialID(GetCredentialByCredentialIDRequest) returns (GetCredentialByCredentialIDResponse);
  rpc GetCredentialForUser(GetCredentialForUserRequest) returns (GetCredentialForUserResponse);
  rpc CreateCredential(CreateCredentialRequest) returns (CreateCredentialResponse);
  rpc UpdateCredentialSignCountByCredentialID(UpdateCredentialSignCountByCredentialIDRequest) returns (UpdateCredentialSignCountByCredentialIDResponse);
  rpc DeleteCredential(DeleteCredentialRequest) returns (DeleteCredentialResponse);
  rpc DeleteAllCredentialsForUser(DeleteAllCredentialsForUserRequest) returns (DeleteAllCredentialsForUserResponse);
  rpc CountCredentialsForUser(CountCredentialsForUserRequest) returns (CountCredentialsForUserResponse);
  rpc CheckCredentialExists(CheckCredentialExistsRequest) returns (CheckCredentialExistsResponse);
}

message ListCredentialsRequest {
  string user_id = 1; // UUID
}

message ListCredentialsResponse {
  repeated UserCredential credentials = 1;
}

message GetCredentialRequest {
  string id = 1; // UUID
  string user_id = 2; // UUID
}

message GetCredentialResponse {
  UserCredential credential = 1;
}

message CreateCredentialRequest {
  string user_id = 1; // UUID
  bytes credential_id = 2;
  bytes public_key = 3;
  int64 sign_count = 4;
}

message CreateCredentialResponse {
  UserCredential credential = 1;
}


message DeleteCredentialRequest {
  string id = 1; // UUID
  string user_id = 2; // UUID
}

message DeleteCredentialResponse {}

message UpdateUserDisplayNameRequest {
  string id = 1; // UUID
  string display_name = 2;
}

message UpdateUserDisplayNameResponse {
  User user = 1;
}

message ListUsersRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  int64 total_count = 2;
}

message CheckUserExistsRequest {
  string id = 1; // UUID
}

message CheckUserExistsResponse {
  bool exists = 1;
}

message GetCredentialByCredentialIDRequest {
  bytes credential_id = 1;
}

message GetCredentialByCredentialIDResponse {
  UserCredential credential = 1;
}

message GetCredentialForUserRequest {
  string id = 1; // UUID
  string user_id = 2; // UUID
}

message GetCredentialForUserResponse {
  UserCredential credential = 1;
}

message UpdateCredentialSignCountByCredentialIDRequest {
  bytes credential_id = 1;
  int64 sign_count = 2;
}

message UpdateCredentialSignCountByCredentialIDResponse {}

message DeleteAllCredentialsForUserRequest {
  string user_id = 1; // UUID
}

message DeleteAllCredentialsForUserResponse {
  int64 affected_rows = 1;
}

message CountCredentialsForUserRequest {
  string user_id = 1; // UUID
}

message CountCredentialsForUserResponse {
  int64 count = 1;
}

message CheckCredentialExistsRequest {
  bytes credential_id = 1;
}

message CheckCredentialExistsResponse {
  bool exists = 1;
}