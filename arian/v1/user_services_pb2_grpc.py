# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from arian.v1 import user_services_pb2 as arian_dot_v1_dot_user__services__pb2


class UserServiceStub(object):
    """User management service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/arian.v1.UserService/GetUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.GetUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.GetUserResponse.FromString,
                )
        self.GetUserByEmail = channel.unary_unary(
                '/arian.v1.UserService/GetUserByEmail',
                request_serializer=arian_dot_v1_dot_user__services__pb2.GetUserByEmailRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.GetUserByEmailResponse.FromString,
                )
        self.CreateUser = channel.unary_unary(
                '/arian.v1.UserService/CreateUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.CreateUserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/arian.v1.UserService/UpdateUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateUserResponse.FromString,
                )
        self.UpdateUserDisplayName = channel.unary_unary(
                '/arian.v1.UserService/UpdateUserDisplayName',
                request_serializer=arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/arian.v1.UserService/DeleteUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteUserResponse.FromString,
                )
        self.ListUsers = channel.unary_unary(
                '/arian.v1.UserService/ListUsers',
                request_serializer=arian_dot_v1_dot_user__services__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.ListUsersResponse.FromString,
                )
        self.CheckUserExists = channel.unary_unary(
                '/arian.v1.UserService/CheckUserExists',
                request_serializer=arian_dot_v1_dot_user__services__pb2.CheckUserExistsRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.CheckUserExistsResponse.FromString,
                )


class UserServiceServicer(object):
    """User management service
    """

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserDisplayName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.GetUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.GetUserResponse.SerializeToString,
            ),
            'GetUserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByEmail,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.GetUserByEmailRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.GetUserByEmailResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.CreateUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.CreateUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.UpdateUserResponse.SerializeToString,
            ),
            'UpdateUserDisplayName': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserDisplayName,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.DeleteUserResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.ListUsersRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.ListUsersResponse.SerializeToString,
            ),
            'CheckUserExists': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserExists,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.CheckUserExistsRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.CheckUserExistsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arian.v1.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """User management service
    """

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/GetUser',
            arian_dot_v1_dot_user__services__pb2.GetUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/GetUserByEmail',
            arian_dot_v1_dot_user__services__pb2.GetUserByEmailRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.GetUserByEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/CreateUser',
            arian_dot_v1_dot_user__services__pb2.CreateUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/UpdateUser',
            arian_dot_v1_dot_user__services__pb2.UpdateUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserDisplayName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/UpdateUserDisplayName',
            arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.UpdateUserDisplayNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/DeleteUser',
            arian_dot_v1_dot_user__services__pb2.DeleteUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/ListUsers',
            arian_dot_v1_dot_user__services__pb2.ListUsersRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.ListUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUserExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.UserService/CheckUserExists',
            arian_dot_v1_dot_user__services__pb2.CheckUserExistsRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.CheckUserExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CredentialServiceStub(object):
    """WebAuthn credential management service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCredentials = channel.unary_unary(
                '/arian.v1.CredentialService/ListCredentials',
                request_serializer=arian_dot_v1_dot_user__services__pb2.ListCredentialsRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.ListCredentialsResponse.FromString,
                )
        self.GetCredential = channel.unary_unary(
                '/arian.v1.CredentialService/GetCredential',
                request_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialResponse.FromString,
                )
        self.GetCredentialByCredentialID = channel.unary_unary(
                '/arian.v1.CredentialService/GetCredentialByCredentialID',
                request_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDResponse.FromString,
                )
        self.GetCredentialForUser = channel.unary_unary(
                '/arian.v1.CredentialService/GetCredentialForUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialForUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialForUserResponse.FromString,
                )
        self.CreateCredential = channel.unary_unary(
                '/arian.v1.CredentialService/CreateCredential',
                request_serializer=arian_dot_v1_dot_user__services__pb2.CreateCredentialRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.CreateCredentialResponse.FromString,
                )
        self.UpdateCredentialSignCountByCredentialID = channel.unary_unary(
                '/arian.v1.CredentialService/UpdateCredentialSignCountByCredentialID',
                request_serializer=arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDResponse.FromString,
                )
        self.DeleteCredential = channel.unary_unary(
                '/arian.v1.CredentialService/DeleteCredential',
                request_serializer=arian_dot_v1_dot_user__services__pb2.DeleteCredentialRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteCredentialResponse.FromString,
                )
        self.DeleteAllCredentialsForUser = channel.unary_unary(
                '/arian.v1.CredentialService/DeleteAllCredentialsForUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserResponse.FromString,
                )
        self.CountCredentialsForUser = channel.unary_unary(
                '/arian.v1.CredentialService/CountCredentialsForUser',
                request_serializer=arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserResponse.FromString,
                )
        self.CheckCredentialExists = channel.unary_unary(
                '/arian.v1.CredentialService/CheckCredentialExists',
                request_serializer=arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsRequest.SerializeToString,
                response_deserializer=arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsResponse.FromString,
                )


class CredentialServiceServicer(object):
    """WebAuthn credential management service
    """

    def ListCredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredentialByCredentialID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredentialForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCredentialSignCountByCredentialID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAllCredentialsForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountCredentialsForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCredentialExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CredentialServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCredentials,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.ListCredentialsRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.ListCredentialsResponse.SerializeToString,
            ),
            'GetCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredential,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialResponse.SerializeToString,
            ),
            'GetCredentialByCredentialID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredentialByCredentialID,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDResponse.SerializeToString,
            ),
            'GetCredentialForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredentialForUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.GetCredentialForUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.GetCredentialForUserResponse.SerializeToString,
            ),
            'CreateCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCredential,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.CreateCredentialRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.CreateCredentialResponse.SerializeToString,
            ),
            'UpdateCredentialSignCountByCredentialID': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCredentialSignCountByCredentialID,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDResponse.SerializeToString,
            ),
            'DeleteCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCredential,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteCredentialRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.DeleteCredentialResponse.SerializeToString,
            ),
            'DeleteAllCredentialsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAllCredentialsForUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserResponse.SerializeToString,
            ),
            'CountCredentialsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CountCredentialsForUser,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserResponse.SerializeToString,
            ),
            'CheckCredentialExists': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCredentialExists,
                    request_deserializer=arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsRequest.FromString,
                    response_serializer=arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arian.v1.CredentialService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CredentialService(object):
    """WebAuthn credential management service
    """

    @staticmethod
    def ListCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/ListCredentials',
            arian_dot_v1_dot_user__services__pb2.ListCredentialsRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.ListCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/GetCredential',
            arian_dot_v1_dot_user__services__pb2.GetCredentialRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.GetCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredentialByCredentialID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/GetCredentialByCredentialID',
            arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.GetCredentialByCredentialIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredentialForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/GetCredentialForUser',
            arian_dot_v1_dot_user__services__pb2.GetCredentialForUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.GetCredentialForUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/CreateCredential',
            arian_dot_v1_dot_user__services__pb2.CreateCredentialRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.CreateCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCredentialSignCountByCredentialID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/UpdateCredentialSignCountByCredentialID',
            arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.UpdateCredentialSignCountByCredentialIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/DeleteCredential',
            arian_dot_v1_dot_user__services__pb2.DeleteCredentialRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.DeleteCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAllCredentialsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/DeleteAllCredentialsForUser',
            arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.DeleteAllCredentialsForUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountCredentialsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/CountCredentialsForUser',
            arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.CountCredentialsForUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCredentialExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arian.v1.CredentialService/CheckCredentialExists',
            arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsRequest.SerializeToString,
            arian_dot_v1_dot_user__services__pb2.CheckCredentialExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
